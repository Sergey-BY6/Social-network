{"version":3,"file":"static/js/969.6644ad82.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/addMessageForm/addMessageFormInside.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__7pPty\",\"dialogsItems\":\"Dialogs_dialogsItems__ZXh7I\",\"active\":\"Dialogs_active__gNB3p\",\"dialogsName\":\"Dialogs_dialogsName__jaEy4\",\"activeLink\":\"Dialogs_activeLink__-UKOj\",\"nameStatusBlock\":\"Dialogs_nameStatusBlock__CA37t\",\"status\":\"Dialogs_status__5wkat\",\"messagesBlock\":\"Dialogs_messagesBlock__fNBNT\",\"messages\":\"Dialogs_messages__pUx8W\",\"message\":\"Dialogs_message__Ed11Q\",\"noMessage\":\"Dialogs_noMessage__uPOFi\",\"noMessegaText\":\"Dialogs_noMessegaText__-zsZB\",\"sendMessageBlock\":\"Dialogs_sendMessageBlock__h6lMh\",\"textareaBlock\":\"Dialogs_textareaBlock__+Xn78\",\"btnAdd\":\"Dialogs_btnAdd__dgVbx\",\"area\":\"Dialogs_area__HxGIo\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n    avatar: string\r\n    status: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src={props.avatar} alt={'image'}/>\r\n            <div className={s.nameStatusBlock}>\r\n                <div className={s.dialogsName}><NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n                </div>\r\n                <div className={s.status}>{props.status}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport { TextareaInside} from '../../common/FormsControls/FormsControls';\r\nimport s from '../Dialogs.module.css';\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageFormInside: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.textareaBlock}>\r\n                <Field component={TextareaInside} name={'newMessageBody'}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder={'Enter your message'}\r\n                       className={s.area}/>\r\n            </div>\r\n                <button className={s.btnAdd}>send</button>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormInsideRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageFormInside)","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport { AddMessageFormType} from './addMessageForm/addMessageForm';\r\nimport {Route, useLocation} from 'react-router-dom';\r\nimport {AddMessageFormInsideRedux} from '../Dialogs/addMessageForm/addMessageFormInside';\r\n\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let dialogElements = props.dialogs.map(el => <DialogItem key={el.id} name={el.name} id={el.id} avatar={el.avatar}\r\n                                                             status={el.status}/>)\r\n\r\n    const messagesFunc = (block: string) => {\r\n        let messageForDialog = props.messages[block].map(el => <Message key={el.id} message={el.message}/>)\r\n        return messageForDialog.length > 0 ?\r\n            <div className={s.messagesBlock} id=\"scrollableDiv\">{messageForDialog}</div> :\r\n            <div className={s.noMessage}><span className={s.noMessegaText}>No message</span></div>\r\n    }\r\n\r\n    const scrollToBottom = () => {\r\n        const scrollableDiv = document.getElementById('scrollableDiv');\r\n        if (scrollableDiv) {\r\n            scrollableDiv.scrollTop = scrollableDiv.scrollHeight;\r\n        }\r\n    }\r\n\r\n    const location = useLocation()\r\n    const path = location.pathname\r\n\r\n\r\n    const addNewMessage = (formData: AddMessageFormType) => {\r\n        props.addMessage(path, formData.newMessageBody)\r\n        scrollToBottom()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <Route path={'/dialogs/1'} render={() => messagesFunc('/dialogs/1')}/>\r\n                <Route path={'/dialogs/2'} render={() => messagesFunc('/dialogs/2')}/>\r\n                <Route path={'/dialogs/3'} render={() => messagesFunc('/dialogs/3')}/>\r\n                <Route path={'/dialogs/4'} render={() => messagesFunc('/dialogs/4')}/>\r\n                <Route path={'/dialogs/5'} render={() => messagesFunc('/dialogs/5')}/>\r\n                <Route path={'/dialogs/6'} render={() => messagesFunc('/dialogs/6')}/>\r\n                {path === '/dialogs' ?\r\n                    <div>Ð¡hoose a friend</div> :\r\n                    <div className={s.sendMessageBlock}>\r\n                        <AddMessageFormInsideRedux onSubmit={addNewMessage}/>\r\n                    </div>}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {addMessageAC, dialogsType, MessageFullType} from '../../Redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../Redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport { withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: dialogsType[]\r\n    messages: MessageFullType\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (block: string, newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (block: string, newMessageBody: string) => {\r\n            dispatch(addMessageAC(block, newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs))\r\n// export default DialogsContainer;\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["props","path","id","className","s","src","avatar","alt","to","activeClassName","name","status","message","maxLength50","maxLengthCreator","AddMessageFormInsideRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextareaInside","validate","required","placeholder","dialogElements","dialogs","map","el","messagesFunc","block","messageForDialog","messages","length","useLocation","pathname","render","formData","addMessage","newMessageBody","scrollableDiv","document","getElementById","scrollTop","scrollHeight","scrollToBottom","compose","connect","state","dialogsPage","dispatch","addMessageAC","withAuthRedirect","Dialogs"],"sourceRoot":""}